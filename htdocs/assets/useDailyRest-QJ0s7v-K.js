var X=Object.defineProperty,C=Object.defineProperties;var F=Object.getOwnPropertyDescriptors;var K=Object.getOwnPropertySymbols;var b=Object.prototype.hasOwnProperty,U=Object.prototype.propertyIsEnumerable;var v=(e,r,t)=>r in e?X(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,R=(e,r)=>{for(var t in r||(r={}))b.call(r,t)&&v(e,t,r[t]);if(K)for(var t of K(r))U.call(r,t)&&v(e,t,r[t]);return e},A=(e,r)=>C(e,F(r));var w=(e,r,t)=>new Promise((s,a)=>{var n=c=>{try{d(t.next(c))}catch(u){a(u)}},o=c=>{try{d(t.throw(c))}catch(u){a(u)}},d=c=>c.done?s(c.value):Promise.resolve(c.value).then(n,o);d((t=t.apply(e,r)).next())});import{u as T,a as k,b as q}from"./query-vendor-B2F_wWlc.js";import{u as h,s as m,J as y}from"./index-ZwIgorfy.js";import{f as D,s as O,e as G,p as B,g as $}from"./utils-vendor-B2FlkASS.js";const i={MAX_DAILY_WORKING_TIME:13,MAX_DAILY_DRIVING_TIME:9,MAX_DAILY_DRIVING_TIME_EXTENDED:10,MAX_WEEKLY_WORKING_TIME:60,MAX_WEEKLY_DRIVING_TIME:56,BREAK_AFTER_4_5_HOURS:45,BREAK_AFTER_6_HOURS:30,BREAK_AFTER_9_HOURS:45,DAILY_REST:11,REDUCED_DAILY_REST:9,WEEKLY_REST:45,MAX_FORTNIGHTLY_DRIVING_TIME:90},se=()=>{const{profile:e}=h();return T({queryKey:["today-time-entry",e==null?void 0:e.id],queryFn:()=>w(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");const r=new Date().toISOString().split("T")[0],{data:t,error:s}=yield m.from("time_entries").select("*").eq("driver_id",e.id).eq("entry_date",r).single();if(s&&s.code!=="PGRST116")throw s;return t}),enabled:!!(e!=null&&e.id)})},p=(e,r)=>{const{profile:t}=h();return T({queryKey:["time-entries",t==null?void 0:t.id,e,r],queryFn:()=>w(void 0,null,function*(){if(!(t!=null&&t.id))throw new Error("User profile is required");let s=m.from("time_entries").select("*").eq("driver_id",t.id).order("entry_date",{ascending:!1});const{data:a,error:n}=yield s;if(n)throw n;return a||[]}),enabled:!!(t!=null&&t.id)})},ne=()=>{const{profile:e}=h(),r=k();return q({mutationFn:t=>w(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");const s=new Date().toISOString().split("T")[0],n=new Date().toTimeString().split(" ")[0],{data:o}=yield m.from("time_entries").select("id").eq("driver_id",e.id).eq("entry_date",s).single();if(o)throw new Error("Already clocked in today");const{data:d,error:c}=yield m.from("time_entries").insert({driver_id:e.id,entry_date:s,clock_in_time:n,location_clock_in:t||"Unknown",status:"active"}).select().single();if(c)throw c;return d}),onSuccess:()=>{r.invalidateQueries({queryKey:["today-time-entry"]}),r.invalidateQueries({queryKey:["time-entries"]}),y.success("Successfully clocked in")},onError:t=>{y.error("Failed to clock in: "+t.message)}})},ie=()=>{const{profile:e}=h(),r=k();return q({mutationFn:t=>w(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");const s=new Date().toISOString().split("T")[0],n=new Date().toTimeString().split(" ")[0],{data:o,error:d}=yield m.from("time_entries").update({clock_out_time:n,location_clock_out:t||"Unknown",status:"completed"}).eq("driver_id",e.id).eq("entry_date",s).eq("status","active").select().single();if(d)throw d;return o}),onSuccess:()=>{r.invalidateQueries({queryKey:["today-time-entry"]}),r.invalidateQueries({queryKey:["time-entries"]}),y.success("Successfully clocked out")},onError:t=>{y.error("Failed to clock out: "+t.message)}})},ae=()=>{const{profile:e}=h(),r=k();return q({mutationFn:()=>w(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");const t=new Date().toISOString().split("T")[0],a=new Date().toTimeString().split(" ")[0],{data:n,error:o}=yield m.from("time_entries").update({break_start_time:a}).eq("driver_id",e.id).eq("entry_date",t).eq("status","active").select().single();if(o)throw o;return n}),onSuccess:()=>{r.invalidateQueries({queryKey:["today-time-entry"]}),y.success("Break started")},onError:t=>{y.error("Failed to start break: "+t.message)}})},oe=()=>{const{profile:e}=h(),r=k();return q({mutationFn:()=>w(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");const t=new Date().toISOString().split("T")[0],a=new Date().toTimeString().split(" ")[0],{data:n,error:o}=yield m.from("time_entries").update({break_end_time:a}).eq("driver_id",e.id).eq("entry_date",t).eq("status","active").select().single();if(o)throw o;return n}),onSuccess:()=>{r.invalidateQueries({queryKey:["today-time-entry"]}),y.success("Break ended")},onError:t=>{y.error("Failed to end break: "+t.message)}})},de=()=>{const{data:e=[]}=p();return(()=>{const t=e.reduce((n,o)=>o.total_hours?n+o.total_hours:n,0),s=e.reduce((n,o)=>o.overtime_hours?n+o.overtime_hours:n,0),a=e.reduce((n,o)=>o.break_hours?n+o.break_hours:n,0);return{totalHours:t,totalOvertime:s,totalBreaks:a,averageHoursPerDay:e.length>0?t/e.length:0,totalDays:e.length}})()},ce=()=>{const{profile:e}=h();return T({queryKey:["time-off-requests",e==null?void 0:e.id],queryFn:()=>w(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");const{data:r,error:t}=yield m.from("time_off_requests").select("*").eq("driver_id",e.id).order("created_at",{ascending:!1});if(t)throw t;return r||[]}),enabled:!!(e!=null&&e.id)})},ue=()=>{const{profile:e}=h(),r=k();return q({mutationFn:t=>w(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");const{data:s,error:a}=yield m.from("time_off_requests").insert(A(R({},t),{driver_id:e.id,status:"pending"})).select().single();if(a)throw a;return s}),onSuccess:()=>{r.invalidateQueries({queryKey:["time-off-requests"]}),y.success("Time off request submitted successfully")},onError:t=>{y.error("Failed to submit time off request: "+t.message)}})},V=(e,r=new Date)=>{const t=[],s=[],a=D(r,"yyyy-MM-dd"),n=e.filter(l=>l.entry_date&&l.entry_date===a),o=O(r,{weekStartsOn:1}),d=G(r,{weekStartsOn:1}),c=e.filter(l=>{if(!l.entry_date)return!1;try{const I=B(l.entry_date);return I>=o&&I<=d}catch(I){return console.warn("Invalid entry_date format:",l.entry_date),!1}}),u=n.reduce((l,I)=>l+(I.total_hours||0),0),E=n.reduce((l,I)=>l+(I.driving_hours||0),0),M=n.reduce((l,I)=>l+(I.break_hours||0),0);u>i.MAX_DAILY_WORKING_TIME?s.push(`Daily working time (${u}h) exceeds limit (${i.MAX_DAILY_WORKING_TIME}h)`):u>i.MAX_DAILY_WORKING_TIME-1&&t.push(`Daily working time (${u}h) approaching limit (${i.MAX_DAILY_WORKING_TIME}h)`),E>i.MAX_DAILY_DRIVING_TIME?s.push(`Daily driving time (${E}h) exceeds limit (${i.MAX_DAILY_DRIVING_TIME}h)`):E>i.MAX_DAILY_DRIVING_TIME-.5&&t.push(`Daily driving time (${E}h) approaching limit (${i.MAX_DAILY_DRIVING_TIME}h)`);const f=c.reduce((l,I)=>l+(I.total_hours||0),0),_=c.reduce((l,I)=>l+(I.driving_hours||0),0);f>i.MAX_WEEKLY_WORKING_TIME?s.push(`Weekly working time (${f}h) exceeds limit (${i.MAX_WEEKLY_WORKING_TIME}h)`):f>i.MAX_WEEKLY_WORKING_TIME-2&&t.push(`Weekly working time (${f}h) approaching limit (${i.MAX_WEEKLY_WORKING_TIME}h)`),_>i.MAX_WEEKLY_DRIVING_TIME?s.push(`Weekly driving time (${_}h) exceeds limit (${i.MAX_WEEKLY_DRIVING_TIME}h)`):_>i.MAX_WEEKLY_DRIVING_TIME-2&&t.push(`Weekly driving time (${_}h) approaching limit (${i.MAX_WEEKLY_DRIVING_TIME}h)`);const g=P(u,M),L=H(u,M),W=Q(),N=x(),Y=z({dailyWorkingTime:u,dailyDrivingTime:E,weeklyWorkingTime:f,weeklyDrivingTime:_,breakCompliance:g,restCompliance:W});return{dailyWorkingTime:u,dailyDrivingTime:E,dailyBreaks:M,dailyRest:0,dailyCompliance:u<=i.MAX_DAILY_WORKING_TIME&&E<=i.MAX_DAILY_DRIVING_TIME,dailyWarnings:t.filter(l=>l.includes("Daily")),weeklyWorkingTime:f,weeklyDrivingTime:_,weeklyRest:0,weeklyCompliance:f<=i.MAX_WEEKLY_WORKING_TIME&&_<=i.MAX_WEEKLY_DRIVING_TIME,weeklyWarnings:t.filter(l=>l.includes("Weekly")),breakCompliance:g,requiredBreaks:S(u),takenBreaks:M,breakWarnings:L,restCompliance:W,restWarnings:N,overallCompliance:s.length===0,complianceScore:Y,criticalViolations:s,warnings:t}},P=(e,r)=>{const t=S(e);return r>=t},S=e=>e<=4.5?0:e<=6?i.BREAK_AFTER_4_5_HOURS/60:e<=9?i.BREAK_AFTER_6_HOURS/60:i.BREAK_AFTER_9_HOURS/60,H=(e,r)=>{const t=[],s=S(e);return e>4.5&&r<s&&t.push(`Break time (${r}h) is less than required (${s}h) for ${e}h of work`),e>6&&r<i.BREAK_AFTER_6_HOURS/60&&t.push("Additional break required after 6 hours of work"),t},Q=(e,r)=>!0,x=(e,r)=>[],z=e=>{let r=100;return e.dailyWorkingTime>i.MAX_DAILY_WORKING_TIME?r-=20:e.dailyWorkingTime>i.MAX_DAILY_WORKING_TIME-1&&(r-=5),e.dailyDrivingTime>i.MAX_DAILY_DRIVING_TIME?r-=20:e.dailyDrivingTime>i.MAX_DAILY_DRIVING_TIME-.5&&(r-=5),e.weeklyWorkingTime>i.MAX_WEEKLY_WORKING_TIME?r-=15:e.weeklyWorkingTime>i.MAX_WEEKLY_WORKING_TIME-2&&(r-=5),e.weeklyDrivingTime>i.MAX_WEEKLY_DRIVING_TIME?r-=15:e.weeklyDrivingTime>i.MAX_WEEKLY_DRIVING_TIME-2&&(r-=5),e.breakCompliance||(r-=10),Math.max(0,r)},le=(e=new Date)=>{const{data:r=[]}=p();return{analysis:V(r,e),limits:i}},_e=(e,r)=>{const{profile:t}=h();return T({queryKey:["daily-rest",t==null?void 0:t.id,e==null?void 0:e.toISOString(),r==null?void 0:r.toISOString()],queryFn:()=>w(void 0,null,function*(){if(!(t!=null&&t.id))throw new Error("User profile is required");let s=m.from("daily_rest").select("*").eq("driver_id",t.id).order("rest_date",{ascending:!1});const{data:a,error:n}=yield s;if(n){if(console.error("Error fetching daily rest:",n),n.code==="PGRST205"||n.code==="42P01")return console.warn("daily_rest table not found, returning empty data"),[];throw n}return a||[]}),enabled:!!(t!=null&&t.id)})},J=()=>{const{profile:e}=h(),r=k();return q({mutationFn:t=>w(void 0,null,function*(){if(!(e!=null&&e.id)||!(e!=null&&e.organization_id))throw new Error("User profile and organization information required");const{data:s,error:a}=yield m.from("daily_rest").insert(A(R({},t),{driver_id:e.id,organization_id:e.organization_id})).select().single();if(a)throw a.code==="PGRST205"||a.code==="42P01"?(console.warn("daily_rest table not found, cannot create rest record"),new Error("Daily rest table not found. Please ensure the database is properly set up.")):a;return s}),onSuccess:()=>{r.invalidateQueries({queryKey:["daily-rest"]}),r.invalidateQueries({queryKey:["schedules"]}),y.success("Daily rest recorded successfully")},onError:t=>{console.error("Error creating daily rest:",t),y.error("Failed to record daily rest: "+t.message)}})},ye=()=>{const{profile:e}=h(),r=k(),t=J();return q({mutationFn:s=>w(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");const a=$({start:s.startDate,end:s.endDate}),{data:n,error:o}=yield m.from("time_entries").select("entry_date").eq("driver_id",e.id).gte("entry_date",D(s.startDate,"yyyy-MM-dd")).lte("entry_date",D(s.endDate,"yyyy-MM-dd"));o&&console.warn("Error fetching time entries:",o);const{data:d,error:c}=yield m.from("daily_rest").select("rest_date").eq("driver_id",e.id).gte("rest_date",D(s.startDate,"yyyy-MM-dd")).lte("rest_date",D(s.endDate,"yyyy-MM-dd"));c&&(c.code==="PGRST205"||c.code==="42P01")&&console.warn("daily_rest table not found, treating as no existing rest records");const u=new Set((n==null?void 0:n.map(_=>_.entry_date))||[]),E=new Set((d==null?void 0:d.map(_=>_.rest_date))||[]),M=a.filter(_=>{const g=D(_,"yyyy-MM-dd");return!u.has(g)&&!E.has(g)}),f=M.map(_=>{const g=D(_,"yyyy-MM-dd");return t.mutateAsync({rest_date:g,rest_type:"daily_rest",duration_hours:24,notes:"Automatically recorded rest day - no work activity"})});return yield Promise.all(f),{daysProcessed:a.length,restDaysCreated:M.length,workedDays:u.size,existingRestDays:E.size}}),onSuccess:s=>{r.invalidateQueries({queryKey:["daily-rest"]}),r.invalidateQueries({queryKey:["schedules"]}),r.invalidateQueries({queryKey:["time-entries"]}),s.restDaysCreated>0?y.success(`Automatically recorded ${s.restDaysCreated} rest days`):y.info("No new rest days to record")},onError:s=>{console.error("Error auto-recording rest days:",s),y.error("Failed to auto-record rest days: "+s.message)}})},j=e=>{const{profile:r}=h(),t=G(e,{weekStartsOn:1});return T({queryKey:["weekly-rest-summary",r==null?void 0:r.id,e.toISOString()],queryFn:()=>w(void 0,null,function*(){if(!(r!=null&&r.id))throw new Error("User profile is required");const s=D(e,"yyyy-MM-dd"),a=D(t,"yyyy-MM-dd"),{data:n,error:o}=yield m.from("time_entries").select("entry_date, total_hours").eq("driver_id",r.id).gte("entry_date",s).lte("entry_date",a);o&&console.warn("Error fetching time entries for weekly summary:",o);const{data:d,error:c}=yield m.from("daily_rest").select("rest_date, rest_type, duration_hours").eq("driver_id",r.id).gte("rest_date",s).lte("rest_date",a);c&&(c.code==="PGRST205"||c.code==="42P01")&&console.warn("daily_rest table not found, treating as no rest records");const u=(n==null?void 0:n.length)||0,E=(d==null?void 0:d.length)||0,M=(n==null?void 0:n.reduce((_,g)=>_+(g.total_hours||0),0))||0,f=(d==null?void 0:d.reduce((_,g)=>_+(g.duration_hours||0),0))||0;return{weekStart:e,weekEnd:t,workedDays:u,restDays:E,totalWorkHours:M,totalRestHours:f,averageWorkHoursPerDay:u>0?M/u:0,averageRestHoursPerDay:E>0?f/E:0}}),enabled:!!(r!=null&&r.id)})},me=()=>{const e=O(new Date,{weekStartsOn:1});return j(e)};export{i as W,p as a,ce as b,de as c,le as d,ne as e,ie as f,ae as g,oe as h,ue as i,ye as j,_e as k,me as l,se as u};
