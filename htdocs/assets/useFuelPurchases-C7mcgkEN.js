var w=Object.defineProperty,F=Object.defineProperties;var b=Object.getOwnPropertyDescriptors;var _=Object.getOwnPropertySymbols;var v=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var g=(r,e,t)=>e in r?w(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,h=(r,e)=>{for(var t in e||(e={}))v.call(e,t)&&g(r,t,e[t]);if(_)for(var t of _(e))E.call(e,t)&&g(r,t,e[t]);return r},m=(r,e)=>F(r,b(e));var l=(r,e,t)=>new Promise((i,a)=>{var o=u=>{try{s(t.next(u))}catch(n){a(n)}},f=u=>{try{s(t.throw(u))}catch(n){a(n)}},s=u=>u.done?i(u.value):Promise.resolve(u.value).then(o,f);s((t=t.apply(r,e)).next())});import{u as S,a as y,b as p}from"./query-vendor-B2F_wWlc.js";import{u as q,s as d,J as c}from"./index-ZwIgorfy.js";const U=()=>{const{user:r,profile:e}=q();return S({queryKey:["fuel-purchases",e==null?void 0:e.id],queryFn:()=>l(void 0,null,function*(){if(!(e!=null&&e.id))throw new Error("User profile is required");console.log("Fetching fuel purchases from database...");const{data:t,error:i}=yield d.from("fuel_purchases").select("*").eq("driver_id",e.id).order("purchase_date",{ascending:!1}).order("created_at",{ascending:!1});if(i)throw console.error("Error fetching fuel purchases:",i),i;const a=(t||[]).map(o=>m(h({},o),{vehicle_number:o.vehicle_number||"Unknown",license_plate:o.license_plate||"Unknown",make:o.make||"Unknown",model:o.model||"Unknown",driver_name:`${e.first_name||""} ${e.last_name||""}`.trim()||"Unknown Driver"}));return console.log("Fetched fuel purchases:",a),a}),enabled:!!(e!=null&&e.id)})},P=()=>{const{profile:r}=q(),e=y();return p({mutationFn:t=>l(void 0,null,function*(){if(!(r!=null&&r.id)||!(r!=null&&r.organization_id))throw new Error("User profile and organization information required");if(!t.vehicle_id)throw new Error("Vehicle ID is required for fuel purchase");const{data:i,error:a}=yield d.from("fuel_purchases").insert(m(h({},t),{driver_id:r.id,organization_id:r.organization_id})).select().single();if(a)throw a;return i}),onSuccess:()=>{e.invalidateQueries({queryKey:["fuel-purchases"]}),c.success("Fuel purchase recorded successfully")},onError:t=>{console.error("Error creating fuel purchase:",t),c.error("Failed to record fuel purchase: "+t.message)}})},Q=()=>{const r=y();return p({mutationFn:i=>l(void 0,[i],function*({id:e,updates:t}){const{data:a,error:o}=yield d.from("fuel_purchases").update(t).eq("id",e).select().single();if(o)throw o;return a}),onSuccess:()=>{r.invalidateQueries({queryKey:["fuel-purchases"]}),c.success("Fuel purchase updated successfully")},onError:e=>{console.error("Error updating fuel purchase:",e),c.error("Failed to update fuel purchase: "+e.message)}})},D=()=>{const r=y();return p({mutationFn:e=>l(void 0,null,function*(){const{error:t}=yield d.from("fuel_purchases").delete().eq("id",e);if(t)throw t;return e}),onSuccess:()=>{r.invalidateQueries({queryKey:["fuel-purchases"]}),c.success("Fuel purchase deleted successfully")},onError:e=>{console.error("Error deleting fuel purchase:",e),c.error("Failed to delete fuel purchase: "+e.message)}})},z=()=>{const{data:r=[]}=U();return{statistics:(()=>{const t=r.reduce((s,u)=>s+Number(u.total_cost),0),i=r.reduce((s,u)=>s+Number(u.quantity),0),a=i>0?t/i:0,o=r.reduce((s,u)=>{const n=u.fuel_type;return s[n]||(s[n]={quantity:0,cost:0,count:0}),s[n].quantity+=Number(u.quantity),s[n].cost+=Number(u.total_cost),s[n].count+=1,s},{}),f=r.reduce((s,u)=>{const n=new Date(u.purchase_date).toISOString().slice(0,7);return s[n]||(s[n]={quantity:0,cost:0,count:0}),s[n].quantity+=Number(u.quantity),s[n].cost+=Number(u.total_cost),s[n].count+=1,s},{});return{totalSpent:t,totalQuantity:i,averagePrice:a,byFuelType:o,monthlyData:f,purchaseCount:r.length}})(),isLoading:!1}};export{P as a,Q as b,D as c,z as d,U as u};
