var E=Object.defineProperty,S=Object.defineProperties;var F=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable;var g=(t,r,o)=>r in t?E(t,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[r]=o,v=(t,r)=>{for(var o in r||(r={}))h.call(r,o)&&g(t,o,r[o]);if(u)for(var o of u(r))f.call(r,o)&&g(t,o,r[o]);return t},y=(t,r)=>S(t,F(r));var w=(t,r)=>{var o={};for(var e in t)h.call(t,e)&&r.indexOf(e)<0&&(o[e]=t[e]);if(t!=null&&u)for(var e of u(t))r.indexOf(e)<0&&f.call(t,e)&&(o[e]=t[e]);return o};var p=(t,r,o)=>new Promise((e,a)=>{var l=n=>{try{i(o.next(n))}catch(s){a(s)}},c=n=>{try{i(o.throw(n))}catch(s){a(s)}},i=n=>n.done?e(n.value):Promise.resolve(n.value).then(l,c);i((o=o.apply(t,r)).next())});import{u as C,a as z,b as I}from"./query-vendor-B2F_wWlc.js";import{u as M,l as b,s as d}from"./index-ZwIgorfy.js";const q=()=>{const{profile:t}=M(),r=()=>{if(!(t!=null&&t.organization_id))throw new Error("User must belong to an organization");return t.organization_id},o=e=>{const a=r();if(e&&e!==a)throw new Error("Access denied: Different organization");return a};return{organizationId:t==null?void 0:t.organization_id,getOrganizationId:r,ensureOrganizationAccess:o}},K=()=>{const{organizationId:t}=q();return C({queryKey:["incidents",t],queryFn:()=>p(void 0,null,function*(){if(!t)return[];console.log("Fetching incidents from database for organization:",t);const{data:r,error:o}=yield d.from("incidents").select("*").eq("organization_id",t).order("created_at",{ascending:!1});if(o)throw console.error("Error fetching incidents:",o),o;const e=[...new Set((r==null?void 0:r.filter(s=>s.reported_by).map(s=>s.reported_by))||[])],a=[...new Set((r==null?void 0:r.filter(s=>s.vehicle_id).map(s=>s.vehicle_id))||[])];let l=[],c=[];if(e.length>0){const{data:s}=yield d.from("profiles").select("id, first_name, last_name, email").in("id",e);l=s||[]}if(a.length>0){const{data:s}=yield d.from("vehicles").select("id, vehicle_number, make, model").in("id",a);c=s||[]}const i=new Map(l.map(s=>[s.id,s])),n=new Map(c.map(s=>[s.id,s]));return r==null?void 0:r.map(s=>y(v({},s),{profiles:s.reported_by&&i.has(s.reported_by)?i.get(s.reported_by):null,vehicles:s.vehicle_id&&n.has(s.vehicle_id)?n.get(s.vehicle_id):null}))}),enabled:!!t})},x=()=>{const t=z(),{toast:r}=b(),{getOrganizationId:o}=q();return I({mutationFn:e=>p(void 0,null,function*(){var i,n,s,m;const a={incident_type:e.incident_type,title:e.title,description:e.description,severity:e.severity,status:e.status||"open",organization_id:o(),incident_date:e.date?e.date.toISOString().split("T")[0]:null,incident_time:e.time||null,location_lat:((i=e.location)==null?void 0:i.lat)||null,location_lng:((n=e.location)==null?void 0:n.lng)||null,location_address:((s=e.location)==null?void 0:s.address)||null,people_involved:e.peopleInvolved||[],witnesses:e.witnesses||[],vehicle_id:e.vehicleId||null,driver_id:e.driverId||null,reported_by:e.reported_by,attachments:((m=e.attachments)==null?void 0:m.map(_=>({name:_.name,size:_.size})))||[],additional_data:e},{data:l,error:c}=yield d.from("incidents").insert(a).select().single();if(c)throw c;return l}),onSuccess:()=>{t.invalidateQueries({queryKey:["incidents"]}),r({title:"Success",description:"Incident reported successfully"})},onError:e=>{r({title:"Error",description:e.message||"Failed to report incident",variant:"destructive"})}})},T=()=>{const t=z(),{toast:r}=b();return I({mutationFn:a=>p(void 0,null,function*(){var l=a,{id:o}=l,e=w(l,["id"]);const{data:c,error:i}=yield d.from("incidents").update(e).eq("id",o).select().single();if(i)throw i;return c}),onSuccess:()=>{t.invalidateQueries({queryKey:["incidents"]}),r({title:"Success",description:"Incident updated successfully"})},onError:o=>{r({title:"Error",description:o.message||"Failed to update incident",variant:"destructive"})}})};export{x as a,T as b,q as c,K as u};
