var q=Object.defineProperty,I=Object.defineProperties;var F=Object.getOwnPropertyDescriptors;var S=Object.getOwnPropertySymbols;var O=Object.prototype.hasOwnProperty,C=Object.prototype.propertyIsEnumerable;var b=(t,r,e)=>r in t?q(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e,_=(t,r)=>{for(var e in r||(r={}))O.call(r,e)&&b(t,e,r[e]);if(S)for(var e of S(r))C.call(r,e)&&b(t,e,r[e]);return t},g=(t,r)=>I(t,F(r));var m=(t,r,e)=>new Promise((n,s)=>{var d=a=>{try{c(e.next(a))}catch(l){s(l)}},i=a=>{try{c(e.throw(a))}catch(l){s(l)}},c=a=>a.done?n(a.value):Promise.resolve(a.value).then(d,i);c((e=e.apply(t,r)).next())});import{u as Q,a as R,b as T}from"./query-vendor-B2F_wWlc.js";import{u as z,s as h,J as p}from"./index-ZwIgorfy.js";const j=()=>{const{user:t,profile:r}=z();return Q({queryKey:["schedules",r==null?void 0:r.organization_id],queryFn:()=>m(void 0,null,function*(){if(!(r!=null&&r.organization_id))throw new Error("Organization ID is required");console.log("Fetching schedules from database...");try{const{data:e,error:n}=yield h.from("schedules").select("id, driver_id, vehicle_id, route_id, start_time, end_time, status, notes, created_at, updated_at, organization_id, created_by").eq("organization_id",r.organization_id).order("start_time",{ascending:!0});if(n){if(console.error("Error fetching schedules:",n),n.code==="42P01"||n.code==="PGRST205")return console.warn("schedules table not found, returning empty data"),[];throw n}if(!e||e.length===0)return console.log("No schedules found, returning empty array"),[];const s=e.filter(o=>o.driver_id).map(o=>o.driver_id),d=e.filter(o=>o.vehicle_id).map(o=>o.vehicle_id),i=e.filter(o=>o.route_id).map(o=>o.route_id),[c,a,l]=yield Promise.all([s.length>0?h.from("profiles").select("id, first_name, last_name, email").in("id",s):Promise.resolve({data:[],error:null}),d.length>0?h.from("vehicles").select("id, vehicle_number, make, model").in("id",d):Promise.resolve({data:[],error:null}),i.length>0?h.from("routes").select("id, name, start_location, end_location").in("id",i):Promise.resolve({data:[],error:null})]),y=e.map(o=>{var f,v,w;const D=(f=c.data)==null?void 0:f.find(u=>u.id===o.driver_id),E=(v=a.data)==null?void 0:v.find(u=>u.id===o.vehicle_id),P=(w=l.data)==null?void 0:w.find(u=>u.id===o.route_id);return g(_({},o),{driver:D||null,vehicle:E||null,route:P||null})});return console.log("Fetched schedules with relations:",y),y||[]}catch(e){return console.error("Error in useSchedules:",e),[]}}),enabled:!!(r!=null&&r.organization_id)})},K=()=>{const{profile:t}=z(),r=R();return T({mutationFn:e=>m(void 0,null,function*(){if(!(t!=null&&t.organization_id)||!(t!=null&&t.id))throw new Error("Organization and user information required");try{const{data:n,error:s}=yield h.from("schedules").insert(g(_({},e),{organization_id:t.organization_id,created_by:t.id})).select().single();if(s){if(s.code==="42P01"||s.code==="PGRST205")return console.warn("schedules table not found, returning mock response"),g(_({id:`schedule-${Date.now()}`},e),{organization_id:t.organization_id,created_by:t.id,created_at:new Date().toISOString(),updated_at:new Date().toISOString()});throw s}return n}catch(n){throw console.error("Error creating schedule:",n),n}}),onSuccess:()=>{r.invalidateQueries({queryKey:["schedules"]}),p.success("Schedule created successfully")},onError:e=>{console.error("Error creating schedule:",e),p.error("Failed to create schedule: "+e.message)}})},W=()=>{const{data:t=[]}=j(),e=new Date().toISOString().split("T")[0];return{total:t.length,today:t.filter(s=>s.start_time.startsWith(e)).length,scheduled:t.filter(s=>s.status==="scheduled").length,in_progress:t.filter(s=>s.status==="in_progress").length,completed:t.filter(s=>s.status==="completed").length,cancelled:t.filter(s=>s.status==="cancelled").length,by_job_type:t.reduce((s,d)=>{const i=d.job_type||"scheduled";return s[i]=(s[i]||0)+1,s},{})}};export{W as a,K as b,j as u};
