var l=(o,c,a)=>new Promise((r,e)=>{var i=t=>{try{n(a.next(t))}catch(u){e(u)}},s=t=>{try{n(a.throw(t))}catch(u){e(u)}},n=t=>t.done?r(t.value):Promise.resolve(t.value).then(i,s);n((a=a.apply(o,c)).next())});import{b as p}from"./query-vendor-B2F_wWlc.js";import{s as k,J as h}from"./index-ZwIgorfy.js";const w=()=>p({mutationFn:a=>l(void 0,[a],function*({planId:o,isAnnual:c=!1}){console.log("Starting Stripe checkout process:",{planId:o,isAnnual:c});const{data:{session:r}}=yield k.auth.getSession();if(!(r!=null&&r.access_token))throw console.error("No authentication token found"),new Error("No authentication token found");console.log("Making request to create-checkout function");const e=yield fetch("https://dznbihypzmvcmradijqn.supabase.co/functions/v1/create-checkout",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r.access_token}`},body:JSON.stringify({planId:o,isAnnual:c})});if(console.log("Response status:",e.status),console.log("Response headers:",Object.fromEntries(e.headers.entries())),!e.ok){const n=yield e.json().catch(()=>({error:"Unknown error"}));throw console.error("Checkout function error:",n),new Error(n.error||`HTTP ${e.status}: Failed to create checkout session`)}const i=yield e.json();console.log("Checkout function response:",i);const{url:s}=i;if(!s)throw console.error("No checkout URL received in response"),new Error("No checkout URL received");return console.log("Redirecting to Stripe checkout:",s),h.loading("Redirecting to payment page..."),window.location.href=s,{url:s}}),onError:o=>{console.error("Stripe checkout error:",o),h.error("Failed to create checkout session: "+o.message)},onSuccess:o=>{console.log("Stripe checkout success:",o),h.dismiss()}});export{w as u};
