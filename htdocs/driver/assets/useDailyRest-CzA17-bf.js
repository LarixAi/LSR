import{m as f,H as q,J as y,G as D,a2 as k,a3 as _,ax as M,ay as A}from"./main-DVuL102c.js";import{e as S}from"./endOfWeek-aLw_agy5.js";import{p as G}from"./parseISO-1k6pJICp.js";import{e as p}from"./eachDayOfInterval-CZlqfhSB.js";const i={MAX_DAILY_WORKING_TIME:13,MAX_DAILY_DRIVING_TIME:9,MAX_DAILY_DRIVING_TIME_EXTENDED:10,MAX_WEEKLY_WORKING_TIME:60,MAX_WEEKLY_DRIVING_TIME:56,BREAK_AFTER_4_5_HOURS:45,BREAK_AFTER_6_HOURS:30,BREAK_AFTER_9_HOURS:45,DAILY_REST:11,REDUCED_DAILY_REST:9,WEEKLY_REST:45,MAX_FORTNIGHTLY_DRIVING_TIME:90},H=()=>{const{profile:e}=f();return q({queryKey:["today-time-entry",e==null?void 0:e.id],queryFn:async()=>{if(!(e!=null&&e.id))throw new Error("User profile is required");const r=new Date().toISOString().split("T")[0],{data:t,error:s}=await y.from("time_entries").select("*").eq("driver_id",e.id).eq("entry_date",r).single();if(s&&s.code!=="PGRST116")throw s;return t},enabled:!!(e!=null&&e.id)})},W=(e,r)=>{const{profile:t}=f();return q({queryKey:["time-entries",t==null?void 0:t.id,e,r],queryFn:async()=>{if(!(t!=null&&t.id))throw new Error("User profile is required");let s=y.from("time_entries").select("*").eq("driver_id",t.id).order("entry_date",{ascending:!1});const{data:a,error:n}=await s;if(n)throw n;return a||[]},enabled:!!(t!=null&&t.id)})},Q=()=>{const{profile:e}=f(),r=D();return k({mutationFn:async t=>{if(!(e!=null&&e.id))throw new Error("User profile is required");const s=new Date().toISOString().split("T")[0],n=new Date().toTimeString().split(" ")[0],{data:o}=await y.from("time_entries").select("id").eq("driver_id",e.id).eq("entry_date",s).single();if(o)throw new Error("Already clocked in today");const{data:u,error:E}=await y.from("time_entries").insert({driver_id:e.id,entry_date:s,clock_in_time:n,location_clock_in:t||"Unknown",status:"active"}).select().single();if(E)throw E;return u},onSuccess:()=>{r.invalidateQueries({queryKey:["today-time-entry"]}),r.invalidateQueries({queryKey:["time-entries"]}),_.success("Successfully clocked in")},onError:t=>{_.error("Failed to clock in: "+t.message)}})},x=()=>{const{profile:e}=f(),r=D();return k({mutationFn:async t=>{if(!(e!=null&&e.id))throw new Error("User profile is required");const s=new Date().toISOString().split("T")[0],n=new Date().toTimeString().split(" ")[0],{data:o,error:u}=await y.from("time_entries").update({clock_out_time:n,location_clock_out:t||"Unknown",status:"completed"}).eq("driver_id",e.id).eq("entry_date",s).eq("status","active").select().single();if(u)throw u;return o},onSuccess:()=>{r.invalidateQueries({queryKey:["today-time-entry"]}),r.invalidateQueries({queryKey:["time-entries"]}),_.success("Successfully clocked out")},onError:t=>{_.error("Failed to clock out: "+t.message)}})},z=()=>{const{profile:e}=f(),r=D();return k({mutationFn:async()=>{if(!(e!=null&&e.id))throw new Error("User profile is required");const t=new Date().toISOString().split("T")[0],a=new Date().toTimeString().split(" ")[0],{data:n,error:o}=await y.from("time_entries").update({break_start_time:a}).eq("driver_id",e.id).eq("entry_date",t).eq("status","active").select().single();if(o)throw o;return n},onSuccess:()=>{r.invalidateQueries({queryKey:["today-time-entry"]}),_.success("Break started")},onError:t=>{_.error("Failed to start break: "+t.message)}})},J=()=>{const{profile:e}=f(),r=D();return k({mutationFn:async()=>{if(!(e!=null&&e.id))throw new Error("User profile is required");const t=new Date().toISOString().split("T")[0],a=new Date().toTimeString().split(" ")[0],{data:n,error:o}=await y.from("time_entries").update({break_end_time:a}).eq("driver_id",e.id).eq("entry_date",t).eq("status","active").select().single();if(o)throw o;return n},onSuccess:()=>{r.invalidateQueries({queryKey:["today-time-entry"]}),_.success("Break ended")},onError:t=>{_.error("Failed to end break: "+t.message)}})},j=()=>{const{data:e=[]}=W();return(()=>{const t=e.reduce((n,o)=>o.total_hours?n+o.total_hours:n,0),s=e.reduce((n,o)=>o.overtime_hours?n+o.overtime_hours:n,0),a=e.reduce((n,o)=>o.break_hours?n+o.break_hours:n,0);return{totalHours:t,totalOvertime:s,totalBreaks:a,averageHoursPerDay:e.length>0?t/e.length:0,totalDays:e.length}})()},Z=()=>{const{profile:e}=f();return q({queryKey:["time-off-requests",e==null?void 0:e.id],queryFn:async()=>{if(!(e!=null&&e.id))throw new Error("User profile is required");const{data:r,error:t}=await y.from("time_off_requests").select("*").eq("driver_id",e.id).order("created_at",{ascending:!1});if(t)throw t;return r||[]},enabled:!!(e!=null&&e.id)})},ee=()=>{const{profile:e}=f(),r=D();return k({mutationFn:async t=>{if(!(e!=null&&e.id))throw new Error("User profile is required");const{data:s,error:a}=await y.from("time_off_requests").insert({...t,driver_id:e.id,status:"pending"}).select().single();if(a)throw a;return s},onSuccess:()=>{r.invalidateQueries({queryKey:["time-off-requests"]}),_.success("Time off request submitted successfully")},onError:t=>{_.error("Failed to submit time off request: "+t.message)}})},L=(e,r=new Date)=>{const t=[],s=[],a=M(r,"yyyy-MM-dd"),n=e.filter(d=>d.entry_date&&d.entry_date===a),o=A(r,{weekStartsOn:1}),u=S(r,{weekStartsOn:1}),E=e.filter(d=>{if(!d.entry_date)return!1;try{const I=G(d.entry_date);return I>=o&&I<=u}catch{return console.warn("Invalid entry_date format:",d.entry_date),!1}}),l=n.reduce((d,I)=>d+(I.total_hours||0),0),m=n.reduce((d,I)=>d+(I.driving_hours||0),0),g=n.reduce((d,I)=>d+(I.break_hours||0),0);l>i.MAX_DAILY_WORKING_TIME?s.push(`Daily working time (${l}h) exceeds limit (${i.MAX_DAILY_WORKING_TIME}h)`):l>i.MAX_DAILY_WORKING_TIME-1&&t.push(`Daily working time (${l}h) approaching limit (${i.MAX_DAILY_WORKING_TIME}h)`),m>i.MAX_DAILY_DRIVING_TIME?s.push(`Daily driving time (${m}h) exceeds limit (${i.MAX_DAILY_DRIVING_TIME}h)`):m>i.MAX_DAILY_DRIVING_TIME-.5&&t.push(`Daily driving time (${m}h) approaching limit (${i.MAX_DAILY_DRIVING_TIME}h)`);const w=E.reduce((d,I)=>d+(I.total_hours||0),0),c=E.reduce((d,I)=>d+(I.driving_hours||0),0);w>i.MAX_WEEKLY_WORKING_TIME?s.push(`Weekly working time (${w}h) exceeds limit (${i.MAX_WEEKLY_WORKING_TIME}h)`):w>i.MAX_WEEKLY_WORKING_TIME-2&&t.push(`Weekly working time (${w}h) approaching limit (${i.MAX_WEEKLY_WORKING_TIME}h)`),c>i.MAX_WEEKLY_DRIVING_TIME?s.push(`Weekly driving time (${c}h) exceeds limit (${i.MAX_WEEKLY_DRIVING_TIME}h)`):c>i.MAX_WEEKLY_DRIVING_TIME-2&&t.push(`Weekly driving time (${c}h) approaching limit (${i.MAX_WEEKLY_DRIVING_TIME}h)`);const h=N(l,g),K=Y(l,g),R=X(),v=C(),O=F({dailyWorkingTime:l,dailyDrivingTime:m,weeklyWorkingTime:w,weeklyDrivingTime:c,breakCompliance:h,restCompliance:R});return{dailyWorkingTime:l,dailyDrivingTime:m,dailyBreaks:g,dailyRest:0,dailyCompliance:l<=i.MAX_DAILY_WORKING_TIME&&m<=i.MAX_DAILY_DRIVING_TIME,dailyWarnings:t.filter(d=>d.includes("Daily")),weeklyWorkingTime:w,weeklyDrivingTime:c,weeklyRest:0,weeklyCompliance:w<=i.MAX_WEEKLY_WORKING_TIME&&c<=i.MAX_WEEKLY_DRIVING_TIME,weeklyWarnings:t.filter(d=>d.includes("Weekly")),breakCompliance:h,requiredBreaks:T(l),takenBreaks:g,breakWarnings:K,restCompliance:R,restWarnings:v,overallCompliance:s.length===0,complianceScore:O,criticalViolations:s,warnings:t}},N=(e,r)=>{const t=T(e);return r>=t},T=e=>e<=4.5?0:e<=6?i.BREAK_AFTER_4_5_HOURS/60:e<=9?i.BREAK_AFTER_6_HOURS/60:i.BREAK_AFTER_9_HOURS/60,Y=(e,r)=>{const t=[],s=T(e);return e>4.5&&r<s&&t.push(`Break time (${r}h) is less than required (${s}h) for ${e}h of work`),e>6&&r<i.BREAK_AFTER_6_HOURS/60&&t.push("Additional break required after 6 hours of work"),t},X=(e,r)=>!0,C=(e,r)=>[],F=e=>{let r=100;return e.dailyWorkingTime>i.MAX_DAILY_WORKING_TIME?r-=20:e.dailyWorkingTime>i.MAX_DAILY_WORKING_TIME-1&&(r-=5),e.dailyDrivingTime>i.MAX_DAILY_DRIVING_TIME?r-=20:e.dailyDrivingTime>i.MAX_DAILY_DRIVING_TIME-.5&&(r-=5),e.weeklyWorkingTime>i.MAX_WEEKLY_WORKING_TIME?r-=15:e.weeklyWorkingTime>i.MAX_WEEKLY_WORKING_TIME-2&&(r-=5),e.weeklyDrivingTime>i.MAX_WEEKLY_DRIVING_TIME?r-=15:e.weeklyDrivingTime>i.MAX_WEEKLY_DRIVING_TIME-2&&(r-=5),e.breakCompliance||(r-=10),Math.max(0,r)},te=(e=new Date)=>{const{data:r=[]}=W();return{analysis:L(r,e),limits:i}},re=(e,r)=>{const{profile:t}=f();return q({queryKey:["daily-rest",t==null?void 0:t.id,e==null?void 0:e.toISOString(),r==null?void 0:r.toISOString()],queryFn:async()=>{if(!(t!=null&&t.id))throw new Error("User profile is required");let s=y.from("daily_rest").select("*").eq("driver_id",t.id).order("rest_date",{ascending:!1});const{data:a,error:n}=await s;if(n){if(console.error("Error fetching daily rest:",n),n.code==="PGRST205"||n.code==="42P01")return console.warn("daily_rest table not found, returning empty data"),[];throw n}return a||[]},enabled:!!(t!=null&&t.id)})},b=()=>{const{profile:e}=f(),r=D();return k({mutationFn:async t=>{if(!(e!=null&&e.id)||!(e!=null&&e.organization_id))throw new Error("User profile and organization information required");const{data:s,error:a}=await y.from("daily_rest").insert({...t,driver_id:e.id,organization_id:e.organization_id}).select().single();if(a)throw a.code==="PGRST205"||a.code==="42P01"?(console.warn("daily_rest table not found, cannot create rest record"),new Error("Daily rest table not found. Please ensure the database is properly set up.")):a;return s},onSuccess:()=>{r.invalidateQueries({queryKey:["daily-rest"]}),r.invalidateQueries({queryKey:["schedules"]}),_.success("Daily rest recorded successfully")},onError:t=>{console.error("Error creating daily rest:",t),_.error("Failed to record daily rest: "+t.message)}})},se=()=>{const{profile:e}=f(),r=D(),t=b();return k({mutationFn:async s=>{if(!(e!=null&&e.id))throw new Error("User profile is required");const a=p({start:s.startDate,end:s.endDate}),{data:n,error:o}=await y.from("time_entries").select("entry_date").eq("driver_id",e.id).gte("entry_date",M(s.startDate,"yyyy-MM-dd")).lte("entry_date",M(s.endDate,"yyyy-MM-dd"));o&&console.warn("Error fetching time entries:",o);const{data:u,error:E}=await y.from("daily_rest").select("rest_date").eq("driver_id",e.id).gte("rest_date",M(s.startDate,"yyyy-MM-dd")).lte("rest_date",M(s.endDate,"yyyy-MM-dd"));E&&(E.code==="PGRST205"||E.code==="42P01")&&console.warn("daily_rest table not found, treating as no existing rest records");const l=new Set((n==null?void 0:n.map(c=>c.entry_date))||[]),m=new Set((u==null?void 0:u.map(c=>c.rest_date))||[]),g=a.filter(c=>{const h=M(c,"yyyy-MM-dd");return!l.has(h)&&!m.has(h)}),w=g.map(c=>{const h=M(c,"yyyy-MM-dd");return t.mutateAsync({rest_date:h,rest_type:"daily_rest",duration_hours:24,notes:"Automatically recorded rest day - no work activity"})});return await Promise.all(w),{daysProcessed:a.length,restDaysCreated:g.length,workedDays:l.size,existingRestDays:m.size}},onSuccess:s=>{r.invalidateQueries({queryKey:["daily-rest"]}),r.invalidateQueries({queryKey:["schedules"]}),r.invalidateQueries({queryKey:["time-entries"]}),s.restDaysCreated>0?_.success(`Automatically recorded ${s.restDaysCreated} rest days`):_.info("No new rest days to record")},onError:s=>{console.error("Error auto-recording rest days:",s),_.error("Failed to auto-record rest days: "+s.message)}})},U=e=>{const{profile:r}=f(),t=S(e,{weekStartsOn:1});return q({queryKey:["weekly-rest-summary",r==null?void 0:r.id,e.toISOString()],queryFn:async()=>{if(!(r!=null&&r.id))throw new Error("User profile is required");const s=M(e,"yyyy-MM-dd"),a=M(t,"yyyy-MM-dd"),{data:n,error:o}=await y.from("time_entries").select("entry_date, total_hours").eq("driver_id",r.id).gte("entry_date",s).lte("entry_date",a);o&&console.warn("Error fetching time entries for weekly summary:",o);const{data:u,error:E}=await y.from("daily_rest").select("rest_date, rest_type, duration_hours").eq("driver_id",r.id).gte("rest_date",s).lte("rest_date",a);E&&(E.code==="PGRST205"||E.code==="42P01")&&console.warn("daily_rest table not found, treating as no rest records");const l=(n==null?void 0:n.length)||0,m=(u==null?void 0:u.length)||0,g=(n==null?void 0:n.reduce((c,h)=>c+(h.total_hours||0),0))||0,w=(u==null?void 0:u.reduce((c,h)=>c+(h.duration_hours||0),0))||0;return{weekStart:e,weekEnd:t,workedDays:l,restDays:m,totalWorkHours:g,totalRestHours:w,averageWorkHoursPerDay:l>0?g/l:0,averageRestHoursPerDay:m>0?w/m:0}},enabled:!!(r!=null&&r.id)})},ne=()=>{const e=A(new Date,{weekStartsOn:1});return U(e)};export{i as W,W as a,Z as b,j as c,te as d,Q as e,x as f,z as g,J as h,ee as i,se as j,re as k,ne as l,H as u};
