import{m as v,H as y,G as m,a1 as _,a2 as g,J as d}from"./main-DVuL102c.js";const h=()=>{const{profile:s}=v(),r=()=>{if(!(s!=null&&s.organization_id))throw new Error("User must belong to an organization");return s.organization_id},o=e=>{const n=r();if(e&&e!==n)throw new Error("Access denied: Different organization");return n};return{organizationId:s==null?void 0:s.organization_id,getOrganizationId:r,ensureOrganizationAccess:o}},w=()=>{const{organizationId:s}=h();return y({queryKey:["incidents",s],queryFn:async()=>{if(!s)return[];console.log("Fetching incidents from database for organization:",s);const{data:r,error:o}=await d.from("incidents").select("*").eq("organization_id",s).order("created_at",{ascending:!1});if(o)throw console.error("Error fetching incidents:",o),o;const e=[...new Set((r==null?void 0:r.filter(t=>t.reported_by).map(t=>t.reported_by))||[])],n=[...new Set((r==null?void 0:r.filter(t=>t.vehicle_id).map(t=>t.vehicle_id))||[])];let i=[],a=[];if(e.length>0){const{data:t}=await d.from("profiles").select("id, first_name, last_name, email").in("id",e);i=t||[]}if(n.length>0){const{data:t}=await d.from("vehicles").select("id, vehicle_number, make, model").in("id",n);a=t||[]}const l=new Map(i.map(t=>[t.id,t])),c=new Map(a.map(t=>[t.id,t]));return r==null?void 0:r.map(t=>({...t,profiles:t.reported_by&&l.has(t.reported_by)?l.get(t.reported_by):null,vehicles:t.vehicle_id&&c.has(t.vehicle_id)?c.get(t.vehicle_id):null}))},enabled:!!s})},z=()=>{const s=m(),{toast:r}=_(),{getOrganizationId:o}=h();return g({mutationFn:async e=>{var l,c,t,u;const n={incident_type:e.incident_type,title:e.title,description:e.description,severity:e.severity,status:e.status||"open",organization_id:o(),incident_date:e.date?e.date.toISOString().split("T")[0]:null,incident_time:e.time||null,location_lat:((l=e.location)==null?void 0:l.lat)||null,location_lng:((c=e.location)==null?void 0:c.lng)||null,location_address:((t=e.location)==null?void 0:t.address)||null,people_involved:e.peopleInvolved||[],witnesses:e.witnesses||[],vehicle_id:e.vehicleId||null,driver_id:e.driverId||null,reported_by:e.reported_by,attachments:((u=e.attachments)==null?void 0:u.map(p=>({name:p.name,size:p.size})))||[],additional_data:e},{data:i,error:a}=await d.from("incidents").insert(n).select().single();if(a)throw a;return i},onSuccess:()=>{s.invalidateQueries({queryKey:["incidents"]}),r({title:"Success",description:"Incident reported successfully"})},onError:e=>{r({title:"Error",description:e.message||"Failed to report incident",variant:"destructive"})}})},I=()=>{const s=m(),{toast:r}=_();return g({mutationFn:async({id:o,...e})=>{const{data:n,error:i}=await d.from("incidents").update(e).eq("id",o).select().single();if(i)throw i;return n},onSuccess:()=>{s.invalidateQueries({queryKey:["incidents"]}),r({title:"Success",description:"Incident updated successfully"})},onError:o=>{r({title:"Error",description:o.message||"Failed to update incident",variant:"destructive"})}})};export{z as a,I as b,h as c,w as u};
