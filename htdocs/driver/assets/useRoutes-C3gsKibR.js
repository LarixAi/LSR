import{m as o,H as u,J as i,G as c,a2 as d,a3 as n}from"./main-DVuL102c.js";const g=()=>{const{user:t,profile:a}=o();return u({queryKey:["routes",a==null?void 0:a.organization_id],queryFn:async()=>{if(!(a!=null&&a.organization_id))throw new Error("Organization ID is required");console.log("Fetching routes from database...");const{data:e,error:r}=await i.from("routes").select(`
          *,
          assignments:route_assignments(*)
        `).eq("organization_id",a.organization_id).order("created_at",{ascending:!1});if(r)throw console.error("Error fetching routes:",r),r;return console.log("Fetched routes:",e),e||[]},enabled:!!(a!=null&&a.organization_id)})},m=()=>{const{profile:t}=o(),a=c();return d({mutationFn:async e=>{if(!(t!=null&&t.organization_id))throw new Error("Organization information required");const{data:r,error:s}=await i.from("routes").insert({...e,organization_id:t.organization_id}).select().single();if(s)throw s;return r},onSuccess:()=>{a.invalidateQueries({queryKey:["routes"]}),n.success("Route created successfully")},onError:e=>{console.error("Error creating route:",e),n.error("Failed to create route: "+e.message)}})},_=()=>{const{data:t=[]}=g();return{total:t.length,active:t.filter(e=>e.status==="active").length,inactive:t.filter(e=>e.status==="inactive").length,total_distance:t.reduce((e,r)=>e+(r.distance||0),0),average_distance:t.length>0?t.reduce((e,r)=>e+(r.distance||0),0)/t.length:0,total_estimated_time:t.reduce((e,r)=>e+(r.estimated_time||0),0),average_estimated_time:t.length>0?t.reduce((e,r)=>e+(r.estimated_time||0),0)/t.length:0}};export{_ as a,m as b,g as u};
