import{m,H as p,J as d,G as z,a2 as D,a3 as g}from"./main-DVuL102c.js";const E=()=>{const{user:t,profile:n}=m();return p({queryKey:["schedules",n==null?void 0:n.organization_id],queryFn:async()=>{if(!(n!=null&&n.organization_id))throw new Error("Organization ID is required");console.log("Fetching schedules from database...");try{const{data:r,error:o}=await d.from("schedules").select("id, driver_id, vehicle_id, route_id, start_time, end_time, status, notes, created_at, updated_at, organization_id, created_by").eq("organization_id",n.organization_id).order("start_time",{ascending:!0});if(o){if(console.error("Error fetching schedules:",o),o.code==="42P01"||o.code==="PGRST205")return console.warn("schedules table not found, returning empty data"),[];throw o}if(!r||r.length===0)return console.log("No schedules found, returning empty array"),[];const e=r.filter(s=>s.driver_id).map(s=>s.driver_id),c=r.filter(s=>s.vehicle_id).map(s=>s.vehicle_id),a=r.filter(s=>s.route_id).map(s=>s.route_id),[y,f,v]=await Promise.all([e.length>0?d.from("profiles").select("id, first_name, last_name, email").in("id",e):Promise.resolve({data:[],error:null}),c.length>0?d.from("vehicles").select("id, vehicle_number, make, model").in("id",c):Promise.resolve({data:[],error:null}),a.length>0?d.from("routes").select("id, name, start_location, end_location").in("id",a):Promise.resolve({data:[],error:null})]),l=r.map(s=>{var u,h,_;const w=(u=y.data)==null?void 0:u.find(i=>i.id===s.driver_id),S=(h=f.data)==null?void 0:h.find(i=>i.id===s.vehicle_id),b=(_=v.data)==null?void 0:_.find(i=>i.id===s.route_id);return{...s,driver:w||null,vehicle:S||null,route:b||null}});return console.log("Fetched schedules with relations:",l),l||[]}catch(r){return console.error("Error in useSchedules:",r),[]}},enabled:!!(n!=null&&n.organization_id)})},q=()=>{const{profile:t}=m(),n=z();return D({mutationFn:async r=>{if(!(t!=null&&t.organization_id)||!(t!=null&&t.id))throw new Error("Organization and user information required");try{const{data:o,error:e}=await d.from("schedules").insert({...r,organization_id:t.organization_id,created_by:t.id}).select().single();if(e){if(e.code==="42P01"||e.code==="PGRST205")return console.warn("schedules table not found, returning mock response"),{id:`schedule-${Date.now()}`,...r,organization_id:t.organization_id,created_by:t.id,created_at:new Date().toISOString(),updated_at:new Date().toISOString()};throw e}return o}catch(o){throw console.error("Error creating schedule:",o),o}},onSuccess:()=>{n.invalidateQueries({queryKey:["schedules"]}),g.success("Schedule created successfully")},onError:r=>{console.error("Error creating schedule:",r),g.error("Failed to create schedule: "+r.message)}})},I=()=>{const{data:t=[]}=E(),r=new Date().toISOString().split("T")[0];return{total:t.length,today:t.filter(e=>e.start_time.startsWith(r)).length,scheduled:t.filter(e=>e.status==="scheduled").length,in_progress:t.filter(e=>e.status==="in_progress").length,completed:t.filter(e=>e.status==="completed").length,cancelled:t.filter(e=>e.status==="cancelled").length,by_job_type:t.reduce((e,c)=>{const a=c.job_type||"scheduled";return e[a]=(e[a]||0)+1,e},{})}};export{I as a,q as b,E as u};
