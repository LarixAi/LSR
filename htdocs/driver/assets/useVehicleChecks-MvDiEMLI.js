import{m as u,H as _,J as n,G as g,a1 as m,a2 as f}from"./main-DVuL102c.js";const y=s=>{const{profile:i}=u();return _({queryKey:["vehicle-checks",s,i==null?void 0:i.organization_id],queryFn:async()=>{if(!(i!=null&&i.organization_id))return[];try{let a=n.from("vehicle_checks").select("*").eq("organization_id",i.organization_id).order("check_date",{ascending:!1});const{data:r,error:t}=await a;if(t)return console.warn("Vehicle checks query failed:",t.message),[];if(!r||r.length===0)return[];const c=[...new Set(r.map(e=>e.vehicle_id).filter(Boolean))],o=[...new Set(r.map(e=>e.driver_id).filter(Boolean))],[l,h]=await Promise.all([c.length>0?n.from("vehicles").select("id, vehicle_number, license_plate, make, model, organization_id").in("id",c).eq("organization_id",i.organization_id):Promise.resolve({data:[],error:null}),o.length>0?n.from("profiles").select("id, first_name, last_name, employee_id, organization_id").in("id",o).eq("organization_id",i.organization_id):Promise.resolve({data:[],error:null})]),d=new Map((l.data||[]).map(e=>[e.id,e])),v=new Map((h.data||[]).map(e=>[e.id,e]));return r.map(e=>({...e,vehicles:e.vehicle_id?d.get(e.vehicle_id):void 0,driver_profile:e.driver_id?v.get(e.driver_id):void 0})).filter(e=>!e.vehicles||e.vehicles.organization_id===i.organization_id)}catch(a){return console.warn("Vehicle checks fetch failed:",a instanceof Error?a.message:"Unknown error"),[]}},enabled:!!(i!=null&&i.organization_id),retry:1,staleTime:5*60*1e3,gcTime:10*60*1e3})},p=()=>{const s=g(),{toast:i}=m(),{profile:a}=u();return f({mutationFn:async r=>{if(!(a!=null&&a.organization_id))throw new Error("Organization ID is required to create vehicle check");const{data:t,error:c}=await n.from("vehicles").select("organization_id").eq("id",r.vehicle_id).single();if(c||!t||t.organization_id!==a.organization_id)throw new Error("Vehicle not found or access denied");const{data:o,error:l}=await n.from("profiles").select("organization_id").eq("id",r.driver_id).single();if(l||!o||o.organization_id!==a.organization_id)throw new Error("Driver not found or access denied");const{data:h,error:d}=await n.from("vehicle_checks").insert([r]).select().single();if(d)throw new Error(`Failed to create vehicle check: ${d.message}`);return h},onSuccess:()=>{s.invalidateQueries({queryKey:["vehicle-checks"]}),i({title:"Success",description:"Vehicle check submitted successfully"})},onError:r=>{i({title:"Error",description:"Failed to submit vehicle check: "+r.message,variant:"destructive"})}})};export{p as a,y as u};
