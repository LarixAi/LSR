import{m as u,H as d,J as i,G as c,a2 as l,a3 as o}from"./main-DVuL102c.js";const g=()=>{const{user:a,profile:t}=u();return d({queryKey:["vehicles",t==null?void 0:t.organization_id],queryFn:async()=>{if(!(t!=null&&t.organization_id))throw console.log("❌ No organization ID available"),new Error("Organization ID is required");console.log("🚗 Fetching vehicles from database..."),console.log("🔍 Organization ID:",t.organization_id);try{const{data:e,error:n}=await i.from("vehicles").select("*").eq("organization_id",t.organization_id).order("vehicle_number",{ascending:!0});if(n)throw console.error("❌ Database error fetching vehicles:",n),n;if(console.log("✅ Raw vehicles data from database:",e),console.log("📊 Number of vehicles found:",(e==null?void 0:e.length)||0),!e||e.length===0)return console.log("⚠️ No vehicles found in database for organization:",t.organization_id),console.log("💡 This is normal if you haven't added any vehicles yet"),[];const s=e.map(r=>(console.log("🔄 Transforming vehicle:",r),{...r,status:r.status||"active",capacity:0,is_active:r.status==="active"||r.status===null,fuel_type:r.fuel_type||"unknown",mileage:0,type:"bus",seating_capacity:0,requires_maintenance:r.status==="maintenance",last_maintenance:r.updated_at,next_maintenance:r.updated_at,mot_expiry:r.updated_at,next_service_date:r.updated_at,service_interval_months:6}));return console.log("✅ Transformed vehicles:",s),s}catch(e){throw console.error("💥 Error in useVehicles:",e),e}},enabled:!!(t!=null&&t.organization_id)})},y=()=>{const{profile:a}=u(),t=c();return l({mutationFn:async e=>{if(!(a!=null&&a.organization_id))throw new Error("Organization ID is required");const{data:n,error:s}=await i.from("vehicles").insert({...e,organization_id:a.organization_id}).select().single();if(s)throw s;return n},onSuccess:()=>{t.invalidateQueries({queryKey:["vehicles"]}),o.success("Vehicle created successfully")},onError:e=>{console.error("Error creating vehicle:",e),o.error("Failed to create vehicle: "+e.message)}})},_=()=>{const a=c();return l({mutationFn:async({id:t,updates:e})=>{const{data:n,error:s}=await i.from("vehicles").update(e).eq("id",t).select().single();if(s)throw s;return n},onSuccess:()=>{a.invalidateQueries({queryKey:["vehicles"]}),o.success("Vehicle updated successfully")},onError:t=>{console.error("Error updating vehicle:",t),o.error("Failed to update vehicle: "+t.message)}})},m=()=>{const a=c();return l({mutationFn:async t=>{const{error:e}=await i.from("vehicles").delete().eq("id",t);if(e)throw e},onSuccess:()=>{a.invalidateQueries({queryKey:["vehicles"]}),o.success("Vehicle deleted successfully")},onError:t=>{console.error("Error deleting vehicle:",t),o.error("Failed to delete vehicle: "+t.message)}})},v=()=>{const{data:a=[]}=g();return{total:a.length,active:a.filter(e=>e.status==="active"||e.is_active).length,maintenance:a.filter(e=>e.status==="maintenance").length,out_of_service:a.filter(e=>e.status==="out_of_service"||!e.is_active).length,average_age:a.length>0?Math.round(a.reduce((e,n)=>e+(new Date().getFullYear()-(n.year||2020)),0)/a.length):0,by_type:a.reduce((e,n)=>{const s=n.type||"unknown";return e[s]=(e[s]||0)+1,e},{})}};export{_ as a,y as b,m as c,v as d,g as u};
