import{u as y}from"./useQuery-Dbdyc74j.js";import{q as h,s as l,J as d,$ as c}from"./main-piTIAPSx.js";import{u as f}from"./useMutation-B8vlA97s.js";const p=()=>{const{user:r,profile:e}=h();return y({queryKey:["fuel-purchases",e==null?void 0:e.id],queryFn:async()=>{if(!(e!=null&&e.id))throw new Error("User profile is required");console.log("Fetching fuel purchases from database...");const{data:s,error:u}=await l.from("fuel_purchases").select("*").eq("driver_id",e.id).order("purchase_date",{ascending:!1}).order("created_at",{ascending:!1});if(u)throw console.error("Error fetching fuel purchases:",u),u;const o=(s||[]).map(i=>({...i,vehicle_number:i.vehicle_number||"Unknown",license_plate:i.license_plate||"Unknown",make:i.make||"Unknown",model:i.model||"Unknown",driver_name:`${e.first_name||""} ${e.last_name||""}`.trim()||"Unknown Driver"}));return console.log("Fetched fuel purchases:",o),o},enabled:!!(e!=null&&e.id)})},w=()=>{const{profile:r}=h(),e=d();return f({mutationFn:async s=>{if(!(r!=null&&r.id)||!(r!=null&&r.organization_id))throw new Error("User profile and organization information required");if(!s.vehicle_id)throw new Error("Vehicle ID is required for fuel purchase");const{data:u,error:o}=await l.from("fuel_purchases").insert({...s,driver_id:r.id,organization_id:r.organization_id}).select().single();if(o)throw o;return u},onSuccess:()=>{e.invalidateQueries({queryKey:["fuel-purchases"]}),c.success("Fuel purchase recorded successfully")},onError:s=>{console.error("Error creating fuel purchase:",s),c.error("Failed to record fuel purchase: "+s.message)}})},F=()=>{const r=d();return f({mutationFn:async({id:e,updates:s})=>{const{data:u,error:o}=await l.from("fuel_purchases").update(s).eq("id",e).select().single();if(o)throw o;return u},onSuccess:()=>{r.invalidateQueries({queryKey:["fuel-purchases"]}),c.success("Fuel purchase updated successfully")},onError:e=>{console.error("Error updating fuel purchase:",e),c.error("Failed to update fuel purchase: "+e.message)}})},b=()=>{const r=d();return f({mutationFn:async e=>{const{error:s}=await l.from("fuel_purchases").delete().eq("id",e);if(s)throw s;return e},onSuccess:()=>{r.invalidateQueries({queryKey:["fuel-purchases"]}),c.success("Fuel purchase deleted successfully")},onError:e=>{console.error("Error deleting fuel purchase:",e),c.error("Failed to delete fuel purchase: "+e.message)}})},v=()=>{const{data:r=[]}=p();return{statistics:(()=>{const s=r.reduce((t,n)=>t+Number(n.total_cost),0),u=r.reduce((t,n)=>t+Number(n.quantity),0),o=u>0?s/u:0,i=r.reduce((t,n)=>{const a=n.fuel_type;return t[a]||(t[a]={quantity:0,cost:0,count:0}),t[a].quantity+=Number(n.quantity),t[a].cost+=Number(n.total_cost),t[a].count+=1,t},{}),m=r.reduce((t,n)=>{const a=new Date(n.purchase_date).toISOString().slice(0,7);return t[a]||(t[a]={quantity:0,cost:0,count:0}),t[a].quantity+=Number(n.quantity),t[a].cost+=Number(n.total_cost),t[a].count+=1,t},{});return{totalSpent:s,totalQuantity:u,averagePrice:o,byFuelType:i,monthlyData:m,purchaseCount:r.length}})(),isLoading:!1}};export{w as a,F as b,b as c,v as d,p as u};
