import{u as b}from"./useQuery-Dbdyc74j.js";import{q as _,s as d,J as z,$ as m}from"./main-piTIAPSx.js";import{u as q}from"./useMutation-B8vlA97s.js";const D=()=>{const{user:t,profile:o}=_();return b({queryKey:["schedules",o==null?void 0:o.organization_id],queryFn:async()=>{if(!(o!=null&&o.organization_id))throw new Error("Organization ID is required");console.log("Fetching schedules from database...");try{const{data:r,error:n}=await d.from("schedules").select("*").eq("organization_id",o.organization_id).order("start_time",{ascending:!0});if(n){if(console.error("Error fetching schedules:",n),n.code==="42P01"||n.code==="PGRST205")return console.warn("schedules table not found, returning empty data"),[];throw n}if(!r||r.length===0)return[];const e=r.filter(s=>s.driver_id).map(s=>s.driver_id),l=r.filter(s=>s.vehicle_id).map(s=>s.vehicle_id),i=r.filter(s=>s.route_id).map(s=>s.route_id),[f,y,v]=await Promise.all([e.length>0?d.from("profiles").select("id, first_name, last_name, email").in("id",e):Promise.resolve({data:[],error:null}),l.length>0?d.from("vehicles").select("id, vehicle_number, make, model").in("id",l):Promise.resolve({data:[],error:null}),i.length>0?d.from("routes").select("id, name, start_location, end_location").in("id",i):Promise.resolve({data:[],error:null})]),c=r.map(s=>{var u,h,g;const w=(u=f.data)==null?void 0:u.find(a=>a.id===s.driver_id),S=(h=y.data)==null?void 0:h.find(a=>a.id===s.vehicle_id),p=(g=v.data)==null?void 0:g.find(a=>a.id===s.route_id);return{...s,driver:w||null,vehicle:S||null,route:p||null}});return console.log("Fetched schedules with relations:",c),c||[]}catch(r){return console.error("Error in useSchedules:",r),[]}},enabled:!!(o!=null&&o.organization_id)})},F=()=>{const{profile:t}=_(),o=z();return q({mutationFn:async r=>{if(!(t!=null&&t.organization_id)||!(t!=null&&t.id))throw new Error("Organization and user information required");try{const{data:n,error:e}=await d.from("schedules").insert({...r,organization_id:t.organization_id,created_by:t.id}).select().single();if(e){if(e.code==="42P01"||e.code==="PGRST205")return console.warn("schedules table not found, returning mock response"),{id:`schedule-${Date.now()}`,...r,organization_id:t.organization_id,created_by:t.id,created_at:new Date().toISOString(),updated_at:new Date().toISOString()};throw e}return n}catch(n){throw console.error("Error creating schedule:",n),n}},onSuccess:()=>{o.invalidateQueries({queryKey:["schedules"]}),m.success("Schedule created successfully")},onError:r=>{console.error("Error creating schedule:",r),m.error("Failed to create schedule: "+r.message)}})},O=()=>{const{data:t=[]}=D(),r=new Date().toISOString().split("T")[0];return{total:t.length,today:t.filter(e=>e.start_time.startsWith(r)).length,scheduled:t.filter(e=>e.status==="scheduled").length,in_progress:t.filter(e=>e.status==="in_progress").length,completed:t.filter(e=>e.status==="completed").length,cancelled:t.filter(e=>e.status==="cancelled").length,by_job_type:t.reduce((e,l)=>{const i=l.job_type||"other";return e[i]=(e[i]||0)+1,e},{})}};export{O as a,F as b,D as u};
